plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id "com.dorongold.task-tree" version "2.1.1"
	id 'nebula.integtest' version '9.6.3'
	id "org.sonarqube" version "4.0.0.2929"
	id 'jacoco'
}

group = 'com.socialNetwork'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '19'
}

repositories {
	mavenCentral()
}

jacocoTestReport {
	reports {
		xml.required = true
	}
	dependsOn test
}

test {
	finalizedBy jacocoTestReport
}

tasks.named('sonarqube').configure {
	dependsOn test
}

sonar {
	properties {
		property 'sonar.host.url', 'http://localhost:9000'
		property 'sonar.login', 'admin'
		property 'sonar.password', '123'
	}
}


sonarqube {
	properties {
		property "sonar.projectKey", "projectKey"
		property "sonar.organization", "organization"
	}
}

bootRun {
	jvmArgs	= [
			"-Djavax.net.ssl.trustStore=$trustStorePath",
			"-Djavax.net.ssl.trustStorePassword=$trustStorePassword",
			"-Djavax.net.ssl.trustStoreType=JKS",
			"-Djavax.net.debug=all"
	]
}



dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server:2.7.5'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.projectlombok:lombok:1.18.28'
	implementation group: 'net.lbruun.springboot', name: 'preliquibase-spring-boot-autoconfigure', version: '1.4.0'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:4.0.3'
	runtimeOnly 'org.postgresql:postgresql'

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.testcontainers:junit-jupiter')
	testImplementation('org.testcontainers:postgresql')
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('integrationTest') {
	useJUnitPlatform()
}

task customFatJar(type : Jar) {
	manifest {
		attributes 'Main-Class' : 'com.socialNetwork.users.UsersApplication'
	}
	from {configurations.compile.collect {it.isDirectory() ? it : zipTree(it)}}
	with(jar)
}